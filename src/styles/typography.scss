$font-family-default: 'acumin-pro', 'Arial', 'Franklin Gothic Medium', 'Arial Narrow', sans-serif;
$min_width: 375px;
$max_width: 1600px;

// Typography
// fontSize and lineHeight contain a list of 2 values (ordered)
// representing the sizes for desktop and mobile
// Use: @include typography('typo-name');

$font-specifications: (
  title: (
    fontSizes: (
      22px,
      20px,
    ),
    fontFamily: $font-family-default,
    fontWeight: 200,
    lineHeights: (
      1.1,
      1.1,
    ),
    textTransform: uppercase,
    fontStyle: normal
  ),
  h1: (
    fontSizes: (
      50px,
      40px,
    ),
    fontFamily: $font-family-default,
    fontWeight: 700,
    lineHeights: (
      1.1,
      1.1,
    ),
    textTransform: uppercase,
    fontStyle: normal,
    color: white
  ),
  h2: (
    fontSizes: (
      28px,
      24px,
    ),
    fontFamily: $font-family-default,
    fontWeight: 200,
    lineHeights: (
      1.1,
      1.1,
    ),
    textTransform: uppercase,
    fontStyle: normal,
    color: black
  ),
  h3: (
    fontSizes: (
      22px,
      20px,
    ),
    fontFamily: $font-family-default,
    fontWeight: 200,
    lineHeights: (
      1.1,
      1.1,
    ),
    fontStyle: normal,
    color: black
  ),
  p: (
    fontSizes: (
      16px,
      16px,
    ),
    fontFamily: $font-family-default,
    fontWeight: 200,
    lineHeights: (
      1.5,
      1.5,
    ),
    fontStyle: normal,
    color: black
  ),
  p-inverse: (
    fontSizes: (
      16px,
      16px,
    ),
    fontFamily: $font-family-default,
    fontWeight: 200,
    lineHeights: (
      1.5,
      1.5,
    ),
    fontStyle: normal,
    color: white
  ),
  menu: (
    fontSizes: (
      20px,
      16px,
    ),
    fontFamily: $font-family-default,
    fontWeight: 400,
    lineHeights: (
      1.5,
      1.5,
    ),
    textTransform: uppercase,
    fontStyle: normal,
    color: white
  ),
);

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

@mixin typography($name) {
  @if not map-has-key($font-specifications, $name) {
    @warn "Warning: `#{$name}` is not a valid font name.";
  } @else {
    $family: map-deep-get($font-specifications, $name, 'fontFamily');
    $sizes: map-deep-get($font-specifications, $name, 'fontSizes');
    $weight: map-deep-get($font-specifications, $name, 'fontWeight');
    $heights: map-deep-get($font-specifications, $name, 'lineHeights');
    $transform: map-deep-get($font-specifications, $name, 'textTransform');
    $style: map-deep-get($font-specifications, $name, 'fontStyle');
    $color: map-deep-get($font-specifications, $name, 'color');

    color: $color;
    font-family: $family;
    font-style: $style;
    font-weight: $weight;
    line-height: nth($heights, 2);

    @include fluid-type($min_width, $max_width, nth($sizes, 2), nth($sizes, 1));

    @if $transform {
      text-transform: $transform;
    }

    @include respond-to('small') {
      line-height: nth($heights, 1);
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;

      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}
